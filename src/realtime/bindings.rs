/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type USHORT = ::std::os::raw::c_ushort;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BYTE = ::std::os::raw::c_uchar;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type UINT32 = ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type SIZE_T = ULONG_PTR;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type PCWSTR = *const WCHAR;
pub type HRESULT = ::std::os::raw::c_long;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>() - 8usize];
    ["Alignment of _LARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>() - 4usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_1::LowPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_1, LowPart) - 0usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_1::HighPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_1, HighPart) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>() - 8usize];
    ["Alignment of _LARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>() - 4usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_2::LowPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_2, LowPart) - 0usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_2::HighPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_2, HighPart) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER"][::std::mem::size_of::<_LARGE_INTEGER>() - 8usize];
    ["Alignment of _LARGE_INTEGER"][::std::mem::align_of::<_LARGE_INTEGER>() - 8usize];
    ["Offset of field: _LARGE_INTEGER::u"][::std::mem::offset_of!(_LARGE_INTEGER, u) - 0usize];
    ["Offset of field: _LARGE_INTEGER::QuadPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER, QuadPart) - 0usize];
};
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type BOOLEAN = BYTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GUID"][::std::mem::size_of::<_GUID>() - 16usize];
    ["Alignment of _GUID"][::std::mem::align_of::<_GUID>() - 4usize];
    ["Offset of field: _GUID::Data1"][::std::mem::offset_of!(_GUID, Data1) - 0usize];
    ["Offset of field: _GUID::Data2"][::std::mem::offset_of!(_GUID, Data2) - 4usize];
    ["Offset of field: _GUID::Data3"][::std::mem::offset_of!(_GUID, Data3) - 6usize];
    ["Offset of field: _GUID::Data4"][::std::mem::offset_of!(_GUID, Data4) - 8usize];
};
pub type GUID = _GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_HANDLE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_HANDLE__"][::std::mem::size_of::<PACKETMONITOR_HANDLE__>() - 4usize];
    ["Alignment of PACKETMONITOR_HANDLE__"]
        [::std::mem::align_of::<PACKETMONITOR_HANDLE__>() - 4usize];
    ["Offset of field: PACKETMONITOR_HANDLE__::unused"]
        [::std::mem::offset_of!(PACKETMONITOR_HANDLE__, unused) - 0usize];
};
pub type PACKETMONITOR_HANDLE = *mut PACKETMONITOR_HANDLE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_SESSION__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_SESSION__"][::std::mem::size_of::<PACKETMONITOR_SESSION__>() - 4usize];
    ["Alignment of PACKETMONITOR_SESSION__"]
        [::std::mem::align_of::<PACKETMONITOR_SESSION__>() - 4usize];
    ["Offset of field: PACKETMONITOR_SESSION__::unused"]
        [::std::mem::offset_of!(PACKETMONITOR_SESSION__, unused) - 0usize];
};
pub type PACKETMONITOR_SESSION = *mut PACKETMONITOR_SESSION__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_REALTIME_STREAM__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_REALTIME_STREAM__"]
        [::std::mem::size_of::<PACKETMONITOR_REALTIME_STREAM__>() - 4usize];
    ["Alignment of PACKETMONITOR_REALTIME_STREAM__"]
        [::std::mem::align_of::<PACKETMONITOR_REALTIME_STREAM__>() - 4usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM__::unused"]
        [::std::mem::offset_of!(PACKETMONITOR_REALTIME_STREAM__, unused) - 0usize];
};
pub type PACKETMONITOR_REALTIME_STREAM = *mut PACKETMONITOR_REALTIME_STREAM__;
#[repr(C)]
#[derive(Copy, Clone)]
pub union PACKETMONITOR_IP_ADDRESS {
    pub IPv4: ULONG,
    pub IPv4_bytes: [UCHAR; 4usize],
    pub IPv6: [ULONGLONG; 2usize],
    pub IPv6_bytes: [UCHAR; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_IP_ADDRESS"]
        [::std::mem::size_of::<PACKETMONITOR_IP_ADDRESS>() - 16usize];
    ["Alignment of PACKETMONITOR_IP_ADDRESS"]
        [::std::mem::align_of::<PACKETMONITOR_IP_ADDRESS>() - 8usize];
    ["Offset of field: PACKETMONITOR_IP_ADDRESS::IPv4"]
        [::std::mem::offset_of!(PACKETMONITOR_IP_ADDRESS, IPv4) - 0usize];
    ["Offset of field: PACKETMONITOR_IP_ADDRESS::IPv4_bytes"]
        [::std::mem::offset_of!(PACKETMONITOR_IP_ADDRESS, IPv4_bytes) - 0usize];
    ["Offset of field: PACKETMONITOR_IP_ADDRESS::IPv6"]
        [::std::mem::offset_of!(PACKETMONITOR_IP_ADDRESS, IPv6) - 0usize];
    ["Offset of field: PACKETMONITOR_IP_ADDRESS::IPv6_bytes"]
        [::std::mem::offset_of!(PACKETMONITOR_IP_ADDRESS, IPv6_bytes) - 0usize];
};
pub const PACKETMONITOR_DATA_SOURCE_KIND_PacketMonitorDataSourceKindAll:
    PACKETMONITOR_DATA_SOURCE_KIND = 0;
pub const PACKETMONITOR_DATA_SOURCE_KIND_PacketMonitorDataSourceKindNetworkInterface:
    PACKETMONITOR_DATA_SOURCE_KIND = 1;
pub type PACKETMONITOR_DATA_SOURCE_KIND = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PACKETMONITOR_DATA_SOURCE_SPECIFICATION {
    pub Kind: PACKETMONITOR_DATA_SOURCE_KIND,
    pub Name: [WCHAR; 64usize],
    pub Description: [WCHAR; 128usize],
    pub Id: UINT32,
    pub SecondaryId: UINT32,
    pub ParentId: UINT32,
    pub __bindgen_anon_1: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1,
    pub Detail: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1 {
    pub IsPresent: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1,
    pub IsPresentValue: UINT,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Guid(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Guid(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Guid_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Guid_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IpV6Address(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IpV6Address(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IpV6Address_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IpV6Address_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IpV4Address(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IpV4Address(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IpV4Address_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IpV4Address_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MacAddress(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MacAddress(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MacAddress_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MacAddress_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Guid: UINT,
        IpV6Address: UINT,
        IpV4Address: UINT,
        MacAddress: UINT,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Guid: u32 = unsafe { ::std::mem::transmute(Guid) };
            Guid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IpV6Address: u32 = unsafe { ::std::mem::transmute(IpV6Address) };
            IpV6Address as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IpV4Address: u32 = unsafe { ::std::mem::transmute(IpV4Address) };
            IpV4Address as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let MacAddress: u32 = unsafe { ::std::mem::transmute(MacAddress) };
            MacAddress as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1"]
        [::std::mem::size_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1>() - 4usize];
    ["Alignment of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1"]
        [::std::mem::align_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1::IsPresent"][::std::mem::offset_of!(
        PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1,
        IsPresent
    )
        - 0usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1::IsPresentValue"][::std::mem::offset_of!(
        PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_1,
        IsPresentValue
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2 {
    pub Guid: GUID,
    pub IpAddress: PACKETMONITOR_IP_ADDRESS,
    pub MacAddress: [UCHAR; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2"]
        [::std::mem::size_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2>() - 16usize];
    ["Alignment of PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2"]
        [::std::mem::align_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2>() - 8usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2::Guid"][::std::mem::offset_of!(
        PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2,
        Guid
    ) - 0usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2::IpAddress"][::std::mem::offset_of!(
        PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2,
        IpAddress
    )
        - 0usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2::MacAddress"][::std::mem::offset_of!(
        PACKETMONITOR_DATA_SOURCE_SPECIFICATION__bindgen_ty_2,
        MacAddress
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_DATA_SOURCE_SPECIFICATION"]
        [::std::mem::size_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION>() - 424usize];
    ["Alignment of PACKETMONITOR_DATA_SOURCE_SPECIFICATION"]
        [::std::mem::align_of::<PACKETMONITOR_DATA_SOURCE_SPECIFICATION>() - 8usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::Kind"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, Kind) - 0usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::Name"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, Name) - 4usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::Description"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, Description) - 132usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::Id"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, Id) - 388usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::SecondaryId"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, SecondaryId) - 392usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::ParentId"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, ParentId) - 396usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_SPECIFICATION::Detail"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_SPECIFICATION, Detail) - 408usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_DATA_SOURCE_LIST {
    pub NumDataSources: UINT32,
    pub DataSources: [*const PACKETMONITOR_DATA_SOURCE_SPECIFICATION; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_DATA_SOURCE_LIST"]
        [::std::mem::size_of::<PACKETMONITOR_DATA_SOURCE_LIST>() - 16usize];
    ["Alignment of PACKETMONITOR_DATA_SOURCE_LIST"]
        [::std::mem::align_of::<PACKETMONITOR_DATA_SOURCE_LIST>() - 8usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_LIST::NumDataSources"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_LIST, NumDataSources) - 0usize];
    ["Offset of field: PACKETMONITOR_DATA_SOURCE_LIST::DataSources"]
        [::std::mem::offset_of!(PACKETMONITOR_DATA_SOURCE_LIST, DataSources) - 8usize];
};
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_FAKE_FILTER_SEND: _PKTMON_DROP_LOCATION = -536866815;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_FAKE_FILTER_RECEIVE: _PKTMON_DROP_LOCATION = -536866814;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_NEXT_RECEIVE: _PKTMON_DROP_LOCATION = -536866813;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_NEXT_SEND: _PKTMON_DROP_LOCATION = -536866812;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_M_FAKE_SEND: _PKTMON_DROP_LOCATION = -536866811;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_SORT_NBL: _PKTMON_DROP_LOCATION = -536866810;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_M_DISPATCH_RECEIVE: _PKTMON_DROP_LOCATION = -536866809;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_M_DUMMY_RECEIVE: _PKTMON_DROP_LOCATION = -536866808;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_POWER_RESUME: _PKTMON_DROP_LOCATION = -536866807;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_SS_RESUME: _PKTMON_DROP_LOCATION = -536866806;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_WDM_SET_BUSY: _PKTMON_DROP_LOCATION = -536866805;
pub const _PKTMON_DROP_LOCATION_PMLOC_NDIS_WDF_SET_BUSY: _PKTMON_DROP_LOCATION = -536866804;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FILTER_DEST_PROC1: _PKTMON_DROP_LOCATION = -536862719;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FILTER_DEST_PROC2: _PKTMON_DROP_LOCATION = -536862718;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_MP_SEND_NBL1: _PKTMON_DROP_LOCATION = -536862717;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_MP_SEND_NBL2: _PKTMON_DROP_LOCATION = -536862716;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_MP_SEND_NBL3: _PKTMON_DROP_LOCATION = -536862715;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL_BW: _PKTMON_DROP_LOCATION = -536862714;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL1: _PKTMON_DROP_LOCATION = -536862713;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL2: _PKTMON_DROP_LOCATION = -536862712;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL3: _PKTMON_DROP_LOCATION = -536862711;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL4: _PKTMON_DROP_LOCATION = -536862710;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL5: _PKTMON_DROP_LOCATION = -536862709;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_NBL6: _PKTMON_DROP_LOCATION = -536862708;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV_NBL1: _PKTMON_DROP_LOCATION = -536862707;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV_NBL2: _PKTMON_DROP_LOCATION = -536862706;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_IMM_SEND1: _PKTMON_DROP_LOCATION = -536862705;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_IMM_SEND2: _PKTMON_DROP_LOCATION = -536862704;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_IMM_SEND3: _PKTMON_DROP_LOCATION = -536862703;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_IMM_SEND4: _PKTMON_DROP_LOCATION = -536862702;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_SC_QOS_APPLY_RES: _PKTMON_DROP_LOCATION = -536862701;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT1: _PKTMON_DROP_LOCATION = -536862700;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT2: _PKTMON_DROP_LOCATION = -536862699;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT3: _PKTMON_DROP_LOCATION = -536862698;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT4: _PKTMON_DROP_LOCATION = -536862697;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT5: _PKTMON_DROP_LOCATION = -536862696;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT6: _PKTMON_DROP_LOCATION = -536862695;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_FWD_PKT7: _PKTMON_DROP_LOCATION = -536862694;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_SRC_PROC1: _PKTMON_DROP_LOCATION = -536862693;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_SRC_PROC2: _PKTMON_DROP_LOCATION = -536862692;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_DST_PROC1: _PKTMON_DROP_LOCATION = -536862691;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_DST_PROC2: _PKTMON_DROP_LOCATION = -536862690;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_DST_PROC3: _PKTMON_DROP_LOCATION = -536862689;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_ROUTER_DST_PROC4: _PKTMON_DROP_LOCATION = -536862688;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_LBFO_SEND_INTERN: _PKTMON_DROP_LOCATION = -536862687;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_PVT_PKT_FWD: _PKTMON_DROP_LOCATION = -536862686;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_SC_QOS_FLUSH_DELAY: _PKTMON_DROP_LOCATION = -536862685;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_SC_QOS_TIMEOUT: _PKTMON_DROP_LOCATION = -536862684;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_SC_QOS_UPDATE_FLOW: _PKTMON_DROP_LOCATION = -536862683;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_SC_QOS_SEND_NBL: _PKTMON_DROP_LOCATION = -536862682;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_PVT_FWD1: _PKTMON_DROP_LOCATION = -536862681;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_PVT_FWD2: _PKTMON_DROP_LOCATION = -536862680;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_PVT_FWD3: _PKTMON_DROP_LOCATION = -536862679;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_PVT_FWD4: _PKTMON_DROP_LOCATION = -536862678;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_PVT_FWD5: _PKTMON_DROP_LOCATION = -536862677;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FLTR_INGRESS: _PKTMON_DROP_LOCATION = -536862676;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FLTR_SRC_PROC: _PKTMON_DROP_LOCATION = -536862675;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FLTR_DST_PROC1: _PKTMON_DROP_LOCATION = -536862674;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_FLTR_DST_PROC2: _PKTMON_DROP_LOCATION = -536862673;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_MP_SEND: _PKTMON_DROP_LOCATION = -536862672;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE: _PKTMON_DROP_LOCATION = -536862671;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_RCV: _PKTMON_DROP_LOCATION = -536862670;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_SEND1: _PKTMON_DROP_LOCATION = -536862669;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_SEND2: _PKTMON_DROP_LOCATION = -536862668;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_SEND3: _PKTMON_DROP_LOCATION = -536862667;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD1: _PKTMON_DROP_LOCATION = -536862666;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD2: _PKTMON_DROP_LOCATION = -536862665;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD3: _PKTMON_DROP_LOCATION = -536862664;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD4: _PKTMON_DROP_LOCATION = -536862663;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD5: _PKTMON_DROP_LOCATION = -536862662;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_PVT_FWD6: _PKTMON_DROP_LOCATION = -536862661;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_HLP_DEST_GROUP: _PKTMON_DROP_LOCATION = -536862660;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV1: _PKTMON_DROP_LOCATION = -536862659;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV2: _PKTMON_DROP_LOCATION = -536862658;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV3: _PKTMON_DROP_LOCATION = -536862657;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV4: _PKTMON_DROP_LOCATION = -536862656;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV5: _PKTMON_DROP_LOCATION = -536862655;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV6: _PKTMON_DROP_LOCATION = -536862654;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV7: _PKTMON_DROP_LOCATION = -536862653;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_RCV8: _PKTMON_DROP_LOCATION = -536862652;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_FWD1: _PKTMON_DROP_LOCATION = -536862651;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_FWD2: _PKTMON_DROP_LOCATION = -536862650;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_FWD3: _PKTMON_DROP_LOCATION = -536862649;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_FWD4: _PKTMON_DROP_LOCATION = -536862648;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_FWD5: _PKTMON_DROP_LOCATION = -536862647;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_IPSEC_OUT_PROC: _PKTMON_DROP_LOCATION = -536862646;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_IPSEC_IN_PROC: _PKTMON_DROP_LOCATION = -536862645;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_IPSEC_MULTI_DST: _PKTMON_DROP_LOCATION = -536862644;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RESERVED_1: _PKTMON_DROP_LOCATION = -536862643;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_POLICY_ENFORCER: _PKTMON_DROP_LOCATION = -536862642;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_POLICY_APPLY1: _PKTMON_DROP_LOCATION = -536862641;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_POLICY_APPLY2: _PKTMON_DROP_LOCATION = -536862640;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_FWD: _PKTMON_DROP_LOCATION = -536862639;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_PM_PROC: _PKTMON_DROP_LOCATION = -536862638;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_POLICY_ENFORCER2: _PKTMON_DROP_LOCATION = -536862637;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_INGR_FLTR: _PKTMON_DROP_LOCATION = -536862636;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_EGR_FLTR: _PKTMON_DROP_LOCATION = -536862635;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_WNV_FRWD1: _PKTMON_DROP_LOCATION = -536862634;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_WNV_FRWD2: _PKTMON_DROP_LOCATION = -536862633;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_WNV_COMPLETE: _PKTMON_DROP_LOCATION = -536862632;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC1: _PKTMON_DROP_LOCATION = -536862631;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC2: _PKTMON_DROP_LOCATION = -536862630;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC3: _PKTMON_DROP_LOCATION = -536862629;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC4: _PKTMON_DROP_LOCATION = -536862628;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC5: _PKTMON_DROP_LOCATION = -536862627;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC6: _PKTMON_DROP_LOCATION = -536862626;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC7: _PKTMON_DROP_LOCATION = -536862625;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC8: _PKTMON_DROP_LOCATION = -536862624;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC9: _PKTMON_DROP_LOCATION = -536862623;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC10: _PKTMON_DROP_LOCATION = -536862622;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC11: _PKTMON_DROP_LOCATION = -536862621;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_DIO_NIC_DELIVER_PD: _PKTMON_DROP_LOCATION = -536862620;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_MP_DELIVER_PD_EGR: _PKTMON_DROP_LOCATION = -536862619;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_DELIVER_PD_INGR: _PKTMON_DROP_LOCATION =
    -536862618;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_PD1: _PKTMON_DROP_LOCATION = -536862617;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_PD2: _PKTMON_DROP_LOCATION = -536862616;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_PD3: _PKTMON_DROP_LOCATION = -536862615;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_PD4: _PKTMON_DROP_LOCATION = -536862614;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_EXT_PT_ROUTE_PD5: _PKTMON_DROP_LOCATION = -536862613;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_DELIVER_PD1: _PKTMON_DROP_LOCATION = -536862612;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_DELIVER_PD2: _PKTMON_DROP_LOCATION = -536862611;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_DELIVER_PD3: _PKTMON_DROP_LOCATION = -536862610;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_POST_PD_TX1: _PKTMON_DROP_LOCATION = -536862609;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_PT_NIC_POST_PD_TX2: _PKTMON_DROP_LOCATION = -536862608;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_DELIVER_PD: _PKTMON_DROP_LOCATION = -536862607;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_RNDIS_SEND: _PKTMON_DROP_LOCATION = -536862606;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_DELIVER_PD1: _PKTMON_DROP_LOCATION = -536862605;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_DELIVER_PD2: _PKTMON_DROP_LOCATION = -536862604;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_MP_NIC_SEND4: _PKTMON_DROP_LOCATION = -536862603;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_RNDIS_DEV_INDIC12: _PKTMON_DROP_LOCATION = -536862602;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_DELIVER_NBL1: _PKTMON_DROP_LOCATION = -536862601;
pub const _PKTMON_DROP_LOCATION_PMLOC_VMS_VM_NIC_DELIVER_NBL2: _PKTMON_DROP_LOCATION = -536862600;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_VF_SEND1: _PKTMON_DROP_LOCATION = -536858623;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_VF_SEND2: _PKTMON_DROP_LOCATION = -536858622;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_RECEIVE_MSG: _PKTMON_DROP_LOCATION = -536858621;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_MP_SEND: _PKTMON_DROP_LOCATION = -536858620;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_MULTI_SEND: _PKTMON_DROP_LOCATION = -536858619;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETVSC_RELEASE_NBL: _PKTMON_DROP_LOCATION = -536858618;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_RCV_NON_PRE_VAL: _PKTMON_DROP_LOCATION = -536854527;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_RCV_CALLOUT: _PKTMON_DROP_LOCATION = -536854526;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_FAST_SEND: _PKTMON_DROP_LOCATION = -536854525;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_SEND_PKT_HLP: _PKTMON_DROP_LOCATION = -536854524;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_PARSE_PKT: _PKTMON_DROP_LOCATION = -536854523;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_ACCEPT_PKT: _PKTMON_DROP_LOCATION = -536854522;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_RCV_ARP: _PKTMON_DROP_LOCATION = -536854521;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_SEND_ARP: _PKTMON_DROP_LOCATION = -536854520;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_RCV_TEREDO: _PKTMON_DROP_LOCATION = -536854519;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_FL_SEND_TEREDO: _PKTMON_DROP_LOCATION = -536854518;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD: _PKTMON_DROP_LOCATION = -536854272;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_ALLOWED: _PKTMON_DROP_LOCATION = -536854271;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_INSPECT: _PKTMON_DROP_LOCATION = -536854270;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_POST_INSPECT: _PKTMON_DROP_LOCATION =
    -536854269;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_HELPER: _PKTMON_DROP_LOCATION = -536854268;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_OPTS: _PKTMON_DROP_LOCATION = -536854267;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE1: _PKTMON_DROP_LOCATION = -536854266;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE2: _PKTMON_DROP_LOCATION = -536854265;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE3: _PKTMON_DROP_LOCATION = -536854264;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE4: _PKTMON_DROP_LOCATION = -536854263;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE5: _PKTMON_DROP_LOCATION = -536854262;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_VALIDATE6: _PKTMON_DROP_LOCATION = -536854261;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG1: _PKTMON_DROP_LOCATION = -536854260;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG2: _PKTMON_DROP_LOCATION = -536854259;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG3: _PKTMON_DROP_LOCATION = -536854258;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG4: _PKTMON_DROP_LOCATION = -536854257;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG_INSPECT: _PKTMON_DROP_LOCATION =
    -536854256;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_FRAG_IPSEC: _PKTMON_DROP_LOCATION =
    -536854255;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS1: _PKTMON_DROP_LOCATION = -536854254;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS2: _PKTMON_DROP_LOCATION = -536854253;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS3: _PKTMON_DROP_LOCATION = -536854252;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS4: _PKTMON_DROP_LOCATION = -536854251;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS5: _PKTMON_DROP_LOCATION = -536854250;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS6: _PKTMON_DROP_LOCATION = -536854249;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS7: _PKTMON_DROP_LOCATION = -536854248;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS8: _PKTMON_DROP_LOCATION = -536854247;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS9: _PKTMON_DROP_LOCATION = -536854246;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS10: _PKTMON_DROP_LOCATION = -536854245;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS11: _PKTMON_DROP_LOCATION = -536854244;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS12: _PKTMON_DROP_LOCATION = -536854243;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS13: _PKTMON_DROP_LOCATION = -536854242;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_OPTS14: _PKTMON_DROP_LOCATION = -536854241;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE1: _PKTMON_DROP_LOCATION = -536854240;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE2: _PKTMON_DROP_LOCATION = -536854239;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE3: _PKTMON_DROP_LOCATION = -536854238;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE4: _PKTMON_DROP_LOCATION = -536854237;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE5: _PKTMON_DROP_LOCATION = -536854236;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_VALIDATE6: _PKTMON_DROP_LOCATION = -536854235;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG1: _PKTMON_DROP_LOCATION = -536854234;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG2: _PKTMON_DROP_LOCATION = -536854233;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG3: _PKTMON_DROP_LOCATION = -536854232;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG4: _PKTMON_DROP_LOCATION = -536854231;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG5: _PKTMON_DROP_LOCATION = -536854230;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG6: _PKTMON_DROP_LOCATION = -536854229;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG_INSPECT: _PKTMON_DROP_LOCATION =
    -536854228;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_FRAG_IPSEC: _PKTMON_DROP_LOCATION =
    -536854227;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_INJECT_FWD1: _PKTMON_DROP_LOCATION = -536854226;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_INJECT_FWD2: _PKTMON_DROP_LOCATION = -536854225;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_INJECT_FWD3: _PKTMON_DROP_LOCATION = -536854224;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_ESP: _PKTMON_DROP_LOCATION = -536854223;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_CLONE_FOR_RAW1: _PKTMON_DROP_LOCATION =
    -536854222;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_CLONE_FOR_RAW2: _PKTMON_DROP_LOCATION =
    -536854221;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_DELIVERED: _PKTMON_DROP_LOCATION = -536854220;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_DISPATCH1: _PKTMON_DROP_LOCATION = -536854219;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_DISPATCH2: _PKTMON_DROP_LOCATION = -536854218;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_DISPATCH3: _PKTMON_DROP_LOCATION = -536854217;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_DISPATCH4: _PKTMON_DROP_LOCATION = -536854216;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_RECEIVE_PKTS: _PKTMON_DROP_LOCATION = -536854215;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_NEIGHBOR_QUEUE1: _PKTMON_DROP_LOCATION =
    -536854214;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_NEIGHBOR_QUEUE2: _PKTMON_DROP_LOCATION =
    -536854213;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_NEIGHBOR_QUEUE3: _PKTMON_DROP_LOCATION =
    -536854212;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_LB_INSPECT: _PKTMON_DROP_LOCATION = -536854211;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_LB_SPLIT1: _PKTMON_DROP_LOCATION = -536854210;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_LB_SPLIT2: _PKTMON_DROP_LOCATION = -536854209;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST1: _PKTMON_DROP_LOCATION = -536854208;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST2: _PKTMON_DROP_LOCATION = -536854207;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST3: _PKTMON_DROP_LOCATION = -536854206;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST4: _PKTMON_DROP_LOCATION = -536854205;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST5: _PKTMON_DROP_LOCATION = -536854204;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST6: _PKTMON_DROP_LOCATION = -536854203;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST7: _PKTMON_DROP_LOCATION = -536854202;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST8: _PKTMON_DROP_LOCATION = -536854201;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST9: _PKTMON_DROP_LOCATION = -536854200;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_FWD_MCAST10: _PKTMON_DROP_LOCATION = -536854199;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_MCAST1: _PKTMON_DROP_LOCATION = -536854198;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_MCAST2: _PKTMON_DROP_LOCATION = -536854197;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_FWD_MCAST3: _PKTMON_DROP_LOCATION = -536854196;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_IPSNPI_CLIENT_DROP: _PKTMON_DROP_LOCATION =
    -536854195;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L3_FWD: _PKTMON_DROP_LOCATION =
    -536854194;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L2_FWD1: _PKTMON_DROP_LOCATION =
    -536854193;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L2_FWD2: _PKTMON_DROP_LOCATION =
    -536854192;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L2_FWD3: _PKTMON_DROP_LOCATION =
    -536854191;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L2_FWD4: _PKTMON_DROP_LOCATION =
    -536854190;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_L2_FWD5: _PKTMON_DROP_LOCATION =
    -536854189;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_IPSNPI_INJECT1: _PKTMON_DROP_LOCATION =
    -536854188;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_IPSNPI_INJECT2: _PKTMON_DROP_LOCATION =
    -536854187;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_IPSNPI_INJECT3: _PKTMON_DROP_LOCATION =
    -536854186;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_IPSNPI_INJECT4: _PKTMON_DROP_LOCATION =
    -536854185;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE1: _PKTMON_DROP_LOCATION = -536854184;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE2: _PKTMON_DROP_LOCATION = -536854183;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE3: _PKTMON_DROP_LOCATION = -536854182;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE4: _PKTMON_DROP_LOCATION = -536854181;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE5: _PKTMON_DROP_LOCATION = -536854180;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE6: _PKTMON_DROP_LOCATION = -536854179;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE7: _PKTMON_DROP_LOCATION = -536854178;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_PACKETIZE8: _PKTMON_DROP_LOCATION = -536854177;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON1: _PKTMON_DROP_LOCATION = -536854176;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON2: _PKTMON_DROP_LOCATION = -536854175;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON3: _PKTMON_DROP_LOCATION = -536854174;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON4: _PKTMON_DROP_LOCATION = -536854173;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON5: _PKTMON_DROP_LOCATION = -536854172;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON6: _PKTMON_DROP_LOCATION = -536854171;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON7: _PKTMON_DROP_LOCATION = -536854170;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON8: _PKTMON_DROP_LOCATION = -536854169;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON9: _PKTMON_DROP_LOCATION = -536854168;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON10: _PKTMON_DROP_LOCATION = -536854167;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON11: _PKTMON_DROP_LOCATION = -536854166;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON12: _PKTMON_DROP_LOCATION = -536854165;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON13: _PKTMON_DROP_LOCATION = -536854164;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON14: _PKTMON_DROP_LOCATION = -536854163;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON15: _PKTMON_DROP_LOCATION = -536854162;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON16: _PKTMON_DROP_LOCATION = -536854161;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_COMMON_INSPECT: _PKTMON_DROP_LOCATION =
    -536854160;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_COMPLETE: _PKTMON_DROP_LOCATION =
    -536854159;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_CLIENT_L3_FWD: _PKTMON_DROP_LOCATION =
    -536854158;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_CLIENT_L2_FWD: _PKTMON_DROP_LOCATION =
    -536854157;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_IPSNPI_CLIENT_INJECT: _PKTMON_DROP_LOCATION =
    -536854156;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_ECHO_REQUEST: _PKTMON_DROP_LOCATION =
    -536854155;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REPLY1: _PKTMON_DROP_LOCATION =
    -536854154;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REPLY2: _PKTMON_DROP_LOCATION =
    -536854153;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REPLY3: _PKTMON_DROP_LOCATION =
    -536854152;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REPLY4: _PKTMON_DROP_LOCATION =
    -536854151;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REPLY5: _PKTMON_DROP_LOCATION =
    -536854150;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST1: _PKTMON_DROP_LOCATION =
    -536854149;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST2: _PKTMON_DROP_LOCATION =
    -536854148;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST3: _PKTMON_DROP_LOCATION =
    -536854147;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST4: _PKTMON_DROP_LOCATION =
    -536854146;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST5: _PKTMON_DROP_LOCATION =
    -536854145;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST6: _PKTMON_DROP_LOCATION =
    -536854144;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST7: _PKTMON_DROP_LOCATION =
    -536854143;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST8: _PKTMON_DROP_LOCATION =
    -536854142;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST9: _PKTMON_DROP_LOCATION =
    -536854141;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST10: _PKTMON_DROP_LOCATION =
    -536854140;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST11: _PKTMON_DROP_LOCATION =
    -536854139;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST12: _PKTMON_DROP_LOCATION =
    -536854138;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST13: _PKTMON_DROP_LOCATION =
    -536854137;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST14: _PKTMON_DROP_LOCATION =
    -536854136;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST15: _PKTMON_DROP_LOCATION =
    -536854135;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST16: _PKTMON_DROP_LOCATION =
    -536854134;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST17: _PKTMON_DROP_LOCATION =
    -536854133;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST18: _PKTMON_DROP_LOCATION =
    -536854132;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST19: _PKTMON_DROP_LOCATION =
    -536854131;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST20: _PKTMON_DROP_LOCATION =
    -536854130;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST21: _PKTMON_DROP_LOCATION =
    -536854129;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ECHO_REQUEST22: _PKTMON_DROP_LOCATION =
    -536854128;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_ECHO_REPLY: _PKTMON_DROP_LOCATION =
    -536854127;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_TIMESTAMP1: _PKTMON_DROP_LOCATION =
    -536854126;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_TIMESTAMP2: _PKTMON_DROP_LOCATION =
    -536854125;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_TIMESTAMP3: _PKTMON_DROP_LOCATION =
    -536854124;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_TIMESTAMP4: _PKTMON_DROP_LOCATION =
    -536854123;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_ADDRMASK: _PKTMON_DROP_LOCATION =
    -536854122;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_ADDRMASK: _PKTMON_DROP_LOCATION =
    -536854121;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_ERROR: _PKTMON_DROP_LOCATION =
    -536854120;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RECEIVE: _PKTMON_DROP_LOCATION =
    -536854119;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RECEIVE_CTRL: _PKTMON_DROP_LOCATION =
    -536854118;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_RS: _PKTMON_DROP_LOCATION = -536854117;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RA1: _PKTMON_DROP_LOCATION = -536854116;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RA2: _PKTMON_DROP_LOCATION = -536854115;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RA3: _PKTMON_DROP_LOCATION = -536854114;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RA4: _PKTMON_DROP_LOCATION = -536854113;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RA5: _PKTMON_DROP_LOCATION = -536854112;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RS1: _PKTMON_DROP_LOCATION = -536854111;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RS2: _PKTMON_DROP_LOCATION = -536854110;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RS3: _PKTMON_DROP_LOCATION = -536854109;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RS4: _PKTMON_DROP_LOCATION = -536854108;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_RS5: _PKTMON_DROP_LOCATION = -536854107;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_RA1: _PKTMON_DROP_LOCATION = -536854106;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_RA2: _PKTMON_DROP_LOCATION = -536854105;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V4_ICMP_RA3: _PKTMON_DROP_LOCATION = -536854104;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_REDIRECT1: _PKTMON_DROP_LOCATION =
    -536854103;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_REDIRECT2: _PKTMON_DROP_LOCATION =
    -536854102;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_REDIRECT3: _PKTMON_DROP_LOCATION =
    -536854101;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V4_ICMP_REDIRECT4: _PKTMON_DROP_LOCATION =
    -536854100;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_ECHO_REQUEST: _PKTMON_DROP_LOCATION =
    -536854099;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REPLY1: _PKTMON_DROP_LOCATION =
    -536854098;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REPLY2: _PKTMON_DROP_LOCATION =
    -536854097;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST1: _PKTMON_DROP_LOCATION =
    -536854096;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST2: _PKTMON_DROP_LOCATION =
    -536854095;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST3: _PKTMON_DROP_LOCATION =
    -536854094;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST4: _PKTMON_DROP_LOCATION =
    -536854093;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST5: _PKTMON_DROP_LOCATION =
    -536854092;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST6: _PKTMON_DROP_LOCATION =
    -536854091;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST7: _PKTMON_DROP_LOCATION =
    -536854090;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST8: _PKTMON_DROP_LOCATION =
    -536854089;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST9: _PKTMON_DROP_LOCATION =
    -536854088;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST10: _PKTMON_DROP_LOCATION =
    -536854087;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST11: _PKTMON_DROP_LOCATION =
    -536854086;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST12: _PKTMON_DROP_LOCATION =
    -536854085;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST13: _PKTMON_DROP_LOCATION =
    -536854084;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST14: _PKTMON_DROP_LOCATION =
    -536854083;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST15: _PKTMON_DROP_LOCATION =
    -536854082;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST16: _PKTMON_DROP_LOCATION =
    -536854081;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST17: _PKTMON_DROP_LOCATION =
    -536854080;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST18: _PKTMON_DROP_LOCATION =
    -536854079;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST19: _PKTMON_DROP_LOCATION =
    -536854078;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST20: _PKTMON_DROP_LOCATION =
    -536854077;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_ECHO_REQUEST21: _PKTMON_DROP_LOCATION =
    -536854076;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_ECHO_REPLY: _PKTMON_DROP_LOCATION =
    -536854075;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_ERROR: _PKTMON_DROP_LOCATION =
    -536854074;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RECEIVE: _PKTMON_DROP_LOCATION =
    -536854073;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RECEIVE_CTRL: _PKTMON_DROP_LOCATION =
    -536854072;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS1: _PKTMON_DROP_LOCATION = -536854071;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS2: _PKTMON_DROP_LOCATION = -536854070;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS3: _PKTMON_DROP_LOCATION = -536854069;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS4: _PKTMON_DROP_LOCATION = -536854068;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS5: _PKTMON_DROP_LOCATION = -536854067;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS6: _PKTMON_DROP_LOCATION = -536854066;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS7: _PKTMON_DROP_LOCATION = -536854065;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NS8: _PKTMON_DROP_LOCATION = -536854064;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA1: _PKTMON_DROP_LOCATION = -536854063;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA2: _PKTMON_DROP_LOCATION = -536854062;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA3: _PKTMON_DROP_LOCATION = -536854061;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA4: _PKTMON_DROP_LOCATION = -536854060;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA5: _PKTMON_DROP_LOCATION = -536854059;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_NA6: _PKTMON_DROP_LOCATION = -536854058;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_NS: _PKTMON_DROP_LOCATION = -536854057;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_NA: _PKTMON_DROP_LOCATION = -536854056;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_RS: _PKTMON_DROP_LOCATION = -536854055;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA1: _PKTMON_DROP_LOCATION = -536854054;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA2: _PKTMON_DROP_LOCATION = -536854053;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA3: _PKTMON_DROP_LOCATION = -536854052;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA4: _PKTMON_DROP_LOCATION = -536854051;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA5: _PKTMON_DROP_LOCATION = -536854050;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA6: _PKTMON_DROP_LOCATION = -536854049;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA7: _PKTMON_DROP_LOCATION = -536854048;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA8: _PKTMON_DROP_LOCATION = -536854047;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA9: _PKTMON_DROP_LOCATION = -536854046;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA10: _PKTMON_DROP_LOCATION = -536854045;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA11: _PKTMON_DROP_LOCATION = -536854044;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA12: _PKTMON_DROP_LOCATION = -536854043;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA13: _PKTMON_DROP_LOCATION = -536854042;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA14: _PKTMON_DROP_LOCATION = -536854041;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RA15: _PKTMON_DROP_LOCATION = -536854040;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_RS: _PKTMON_DROP_LOCATION = -536854039;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_RA: _PKTMON_DROP_LOCATION = -536854038;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT1: _PKTMON_DROP_LOCATION =
    -536854037;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT2: _PKTMON_DROP_LOCATION =
    -536854036;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT3: _PKTMON_DROP_LOCATION =
    -536854035;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT4: _PKTMON_DROP_LOCATION =
    -536854034;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT5: _PKTMON_DROP_LOCATION =
    -536854033;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT6: _PKTMON_DROP_LOCATION =
    -536854032;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT7: _PKTMON_DROP_LOCATION =
    -536854031;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT8: _PKTMON_DROP_LOCATION =
    -536854030;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_REDIRECT9: _PKTMON_DROP_LOCATION =
    -536854029;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_REDIRECT: _PKTMON_DROP_LOCATION =
    -536854028;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY1: _PKTMON_DROP_LOCATION =
    -536853771;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY2: _PKTMON_DROP_LOCATION =
    -536853770;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY3: _PKTMON_DROP_LOCATION =
    -536853769;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY4: _PKTMON_DROP_LOCATION =
    -536853768;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY5: _PKTMON_DROP_LOCATION =
    -536853767;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY6: _PKTMON_DROP_LOCATION =
    -536853766;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_QUERY7: _PKTMON_DROP_LOCATION =
    -536853765;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_REPORT1: _PKTMON_DROP_LOCATION =
    -536853764;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_REPORT2: _PKTMON_DROP_LOCATION =
    -536853763;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_REPORT3: _PKTMON_DROP_LOCATION =
    -536853762;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_REPORT4: _PKTMON_DROP_LOCATION =
    -536853761;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_V6_ICMP_MLD_REPORT5: _PKTMON_DROP_LOCATION =
    -536853968;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_MLD_REPORT1: _PKTMON_DROP_LOCATION =
    -536853967;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_MLD_REPORT2: _PKTMON_DROP_LOCATION =
    -536853966;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_V6_ICMP_MLD_REPORT3: _PKTMON_DROP_LOCATION =
    -536853965;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR1: _PKTMON_DROP_LOCATION = -536853964;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR2: _PKTMON_DROP_LOCATION = -536853963;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR3: _PKTMON_DROP_LOCATION = -536853962;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR4: _PKTMON_DROP_LOCATION = -536853961;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR5: _PKTMON_DROP_LOCATION = -536853960;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR6: _PKTMON_DROP_LOCATION = -536853959;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_ERROR7: _PKTMON_DROP_LOCATION = -536853958;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_CTRL: _PKTMON_DROP_LOCATION = -536853957;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_REDIRECT1: _PKTMON_DROP_LOCATION =
    -536853956;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_REDIRECT2: _PKTMON_DROP_LOCATION =
    -536853955;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_SEND_ICMP_REDIRECT3: _PKTMON_DROP_LOCATION =
    -536853954;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_ARP_RESPONSE1: _PKTMON_DROP_LOCATION =
    -536853953;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_ARP_RESPONSE2: _PKTMON_DROP_LOCATION =
    -536853952;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_NL_RCV_ARP_REQUEST: _PKTMON_DROP_LOCATION = -536853951;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_MATCH: _PKTMON_DROP_LOCATION = -536853248;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_LISTENER: _PKTMON_DROP_LOCATION = -536853247;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_LISTENER_INSPECT1: _PKTMON_DROP_LOCATION =
    -536853246;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_LISTENER_INSPECT2: _PKTMON_DROP_LOCATION =
    -536853245;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_SYN_RECEIVE_INSPECT: _PKTMON_DROP_LOCATION =
    -536853244;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_INSPECT: _PKTMON_DROP_LOCATION = -536853243;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_RECEIVE: _PKTMON_DROP_LOCATION = -536853242;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL1: _PKTMON_DROP_LOCATION = -536853241;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL2: _PKTMON_DROP_LOCATION = -536853240;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL3: _PKTMON_DROP_LOCATION = -536853239;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL4: _PKTMON_DROP_LOCATION = -536853238;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL5: _PKTMON_DROP_LOCATION = -536853237;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL6: _PKTMON_DROP_LOCATION = -536853236;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL7: _PKTMON_DROP_LOCATION = -536853235;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL8: _PKTMON_DROP_LOCATION = -536853234;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL9: _PKTMON_DROP_LOCATION = -536853233;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL10: _PKTMON_DROP_LOCATION =
    -536853232;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL11: _PKTMON_DROP_LOCATION =
    -536853231;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL12: _PKTMON_DROP_LOCATION =
    -536853230;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL13: _PKTMON_DROP_LOCATION =
    -536853229;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL14: _PKTMON_DROP_LOCATION =
    -536853228;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL15: _PKTMON_DROP_LOCATION =
    -536853227;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL16: _PKTMON_DROP_LOCATION =
    -536853226;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL17: _PKTMON_DROP_LOCATION =
    -536853225;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL18: _PKTMON_DROP_LOCATION =
    -536853224;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL19: _PKTMON_DROP_LOCATION =
    -536853223;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL20: _PKTMON_DROP_LOCATION =
    -536853222;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL21: _PKTMON_DROP_LOCATION =
    -536853221;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL22: _PKTMON_DROP_LOCATION =
    -536853220;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL23: _PKTMON_DROP_LOCATION =
    -536853219;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL24: _PKTMON_DROP_LOCATION =
    -536853218;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL25: _PKTMON_DROP_LOCATION =
    -536853217;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL26: _PKTMON_DROP_LOCATION =
    -536853216;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL27: _PKTMON_DROP_LOCATION =
    -536853215;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL28: _PKTMON_DROP_LOCATION =
    -536853214;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL29: _PKTMON_DROP_LOCATION =
    -536853213;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL30: _PKTMON_DROP_LOCATION =
    -536853212;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_CAREFUL31: _PKTMON_DROP_LOCATION =
    -536853211;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT_INSPECT: _PKTMON_DROP_LOCATION =
    -536853210;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT1: _PKTMON_DROP_LOCATION =
    -536853209;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT2: _PKTMON_DROP_LOCATION =
    -536853208;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT3: _PKTMON_DROP_LOCATION =
    -536853207;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT4: _PKTMON_DROP_LOCATION =
    -536853206;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_TIME_WAIT5: _PKTMON_DROP_LOCATION =
    -536853205;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_VALIDATE1: _PKTMON_DROP_LOCATION =
    -536853204;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_VALIDATE2: _PKTMON_DROP_LOCATION =
    -536853203;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_VALIDATE3: _PKTMON_DROP_LOCATION =
    -536853202;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_VALIDATE4: _PKTMON_DROP_LOCATION =
    -536853201;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_TCP_VALIDATE5: _PKTMON_DROP_LOCATION =
    -536853200;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_INSPECT: _PKTMON_DROP_LOCATION = -536852992;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_DELIVER1: _PKTMON_DROP_LOCATION = -536852991;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_DELIVER2: _PKTMON_DROP_LOCATION = -536852990;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_DELIVER3: _PKTMON_DROP_LOCATION = -536852989;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_DELIVER4: _PKTMON_DROP_LOCATION = -536852988;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_BEGIN_DELIVERY1: _PKTMON_DROP_LOCATION =
    -536852987;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_BEGIN_DELIVERY2: _PKTMON_DROP_LOCATION =
    -536852986;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_BEGIN_DELIVERY3: _PKTMON_DROP_LOCATION =
    -536852985;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_BEGIN_DELIVERY4: _PKTMON_DROP_LOCATION =
    -536852984;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_BEGIN_DELIVERY5: _PKTMON_DROP_LOCATION =
    -536852983;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_RECEIVE1: _PKTMON_DROP_LOCATION = -536852982;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_RECEIVE2: _PKTMON_DROP_LOCATION = -536852981;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_UDP_RECEIVE3: _PKTMON_DROP_LOCATION = -536852980;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_RAW_DELIVER1: _PKTMON_DROP_LOCATION = -536852736;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_RAW_DELIVER2: _PKTMON_DROP_LOCATION = -536852735;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_RAW_DELIVER3: _PKTMON_DROP_LOCATION = -536852734;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_RAW_DELIVER4: _PKTMON_DROP_LOCATION = -536852733;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_TL_RCV_RAW_RECEIVE: _PKTMON_DROP_LOCATION = -536852732;
pub const _PKTMON_DROP_LOCATION_PMLOC_TCPIP_MAX: _PKTMON_DROP_LOCATION = -536850433;
pub const _PKTMON_DROP_LOCATION_PMLOC_HTTP_WSK_RECEIVE: _PKTMON_DROP_LOCATION = -536850431;
pub const _PKTMON_DROP_LOCATION_PMLOC_HTTP_WSK_SEND: _PKTMON_DROP_LOCATION = -536850430;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_UNKNOWN: _PKTMON_DROP_LOCATION = -536846336;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_VALIDATE_MAPPING_OR_PEND_PKT_MAP_NULL:
    _PKTMON_DROP_LOCATION = -536846335;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_CREATE_PEND_MAPPINGMAPNULL: _PKTMON_DROP_LOCATION =
    -536846334;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DUP_PKT_NO_PKT_DUP: _PKTMON_DROP_LOCATION = -536846333;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DUP_PKT_PEND_PKT_LIMITEXCEEDED: _PKTMON_DROP_LOCATION =
    -536846332;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DUP_NETBUFFERLIST_NB_LSGTMAX_PKT: _PKTMON_DROP_LOCATION =
    -536846331;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DUP_PDBUFFER_NB_LSGTMAX_PKT: _PKTMON_DROP_LOCATION =
    -536846330;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PEND_ORIG_PKT_NO_PKT_DUP: _PKTMON_DROP_LOCATION =
    -536846329;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PEND_ORIG_PKT_PEND_PKT_LIMITEXCEEDED:
    _PKTMON_DROP_LOCATION = -536846328;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PEND_ORIG_NETBUFFERLIST_NB_LSGTMAX_PKT:
    _PKTMON_DROP_LOCATION = -536846327;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DUP_NETBUFFERLIST_RET_STATUS_PEND: _PKTMON_DROP_LOCATION =
    -536846320;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_TCP_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846319;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_TCP_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846318;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_TCP_MIN_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846317;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_TCP_HDR_SZLIMIT: _PKTMON_DROP_LOCATION =
    -536846316;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_TCP_FULL_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846315;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846314;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846313;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_MIN_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846312;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_FRAG_PKT_RDMA:
    _PKTMON_DROP_LOCATION = -536846311;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_HDR_SZLIMITRDMA:
    _PKTMON_DROP_LOCATION = -536846304;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_FRAG_PKT_VXLAN:
    _PKTMON_DROP_LOCATION = -536846303;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_HDR_SZLIMITVXLAN:
    _PKTMON_DROP_LOCATION = -536846302;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_FULL_HDR_NULLVXLAN:
    _PKTMON_DROP_LOCATION = -536846301;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_HDR_INVALID: _PKTMON_DROP_LOCATION =
    -536846300;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_UDP_INCONSISTENT_ETH_TYPE:
    _PKTMON_DROP_LOCATION = -536846299;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_RESERVED: _PKTMON_DROP_LOCATION =
    -536846298;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ICMP_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846297;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ICMP_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846296;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ICMP_MIN_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846295;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ICMP_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846288;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ICMP_FULL_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846287;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846286;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846285;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_MIN_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846284;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_UNSUP_PORT_EDROUTING:
    _PKTMON_DROP_LOCATION = -536846283;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_HDR_SZLIMIT: _PKTMON_DROP_LOCATION =
    -536846282;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_GRE_FULL_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846281;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_IPV6_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846280;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_IPV6_UNPARSED_HDR:
    _PKTMON_DROP_LOCATION = -536846279;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_NO_PROT_PA_PKT: _PKTMON_DROP_LOCATION =
    -536846272;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_NO_PROT: _PKTMON_DROP_LOCATION = -536846271;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ESP_FRAG_PKT: _PKTMON_DROP_LOCATION =
    -536846270;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ESP_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846269;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_PROT_ESP_MIN_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846268;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_HDR_NB_UNSUPPORTED_PROT: _PKTMON_DROP_LOCATION =
    -536846267;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_EXTRACT_ETHERNET_HDR_NB_HDR_NULL: _PKTMON_DROP_LOCATION =
    -536846266;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_EXTRACT_ETHERNET_HDR_NB_HDR_SIZELIMIT:
    _PKTMON_DROP_LOCATION = -536846265;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV4_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846264;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV4_HDR_NULL: _PKTMON_DROP_LOCATION =
    -536846263;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV4_HDR_SZLIMIT: _PKTMON_DROP_LOCATION =
    -536846256;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV4_INVALID_PROT_VERSION:
    _PKTMON_DROP_LOCATION = -536846255;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV4_FULL_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846254;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV6_MIN_HDR_SZLIMIT:
    _PKTMON_DROP_LOCATION = -536846253;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV6_HDR_NULL: _PKTMON_DROP_LOCATION =
    -536846252;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_IPV6_INVALID_PROT_VERSION:
    _PKTMON_DROP_LOCATION = -536846251;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PARSE_IP_HDR_NB_INVALID_PROT: _PKTMON_DROP_LOCATION =
    -536846250;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_GENERATE_UNIFIEDFLOW_IDFROM_PKT_ENCAP_HDR_INVALID:
    _PKTMON_DROP_LOCATION = -536846249;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_GENERATE_UNIFIEDFLOW_IDFROM_PKT_INVALID:
    _PKTMON_DROP_LOCATION = -536846248;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DEFAULT_FWD_PKT_GFT_PORT_NULL: _PKTMON_DROP_LOCATION =
    -536846247;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DEFAULT_FWD_PKT_NO_PORT_TOSEND: _PKTMON_DROP_LOCATION =
    -536846240;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DEFAULT_FWD_PKT_NONIP: _PKTMON_DROP_LOCATION = -536846239;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DEFAULT_FWD_PKT_UNICAST_PORT_NOTREADY:
    _PKTMON_DROP_LOCATION = -536846238;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_DEFAULT_FWD_PKT_UNICAST_NO_DESTINATION:
    _PKTMON_DROP_LOCATION = -536846237;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_QUEUED: _PKTMON_DROP_LOCATION =
    -536846236;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_MACGUARD: _PKTMON_DROP_LOCATION =
    -536846235;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_BROADCAST_MACGUARD:
    _PKTMON_DROP_LOCATION = -536846234;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_INVALID_PKT: _PKTMON_DROP_LOCATION =
    -536846233;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_INVALID_PKT_ARP:
    _PKTMON_DROP_LOCATION = -536846232;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_INTERCEPT_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846231;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_HDR_NULL: _PKTMON_DROP_LOCATION =
    -536846224;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_TYPE_REQ_OR_NUD:
    _PKTMON_DROP_LOCATION = -536846223;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_ADDRESS_INFO_VIRTUALIZED:
    _PKTMON_DROP_LOCATION = -536846222;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_HDR_NOTNULL: _PKTMON_DROP_LOCATION =
    -536846221;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_PKT_INTERCEPT_HDR_NOTNULL:
    _PKTMON_DROP_LOCATION = -536846220;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_INCOMING_PKT_ETHER_HDR_NULL:
    _PKTMON_DROP_LOCATION = -536846219;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_INCOMING_PKT_ETHER_HDR_NULL_NONIP:
    _PKTMON_DROP_LOCATION = -536846218;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_INCOMING_PKT_HDR_NOTNULL: _PKTMON_DROP_LOCATION =
    -536846217;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_INCOMING_PKT_ETHER_HDR_NOT_NULL_NONIP:
    _PKTMON_DROP_LOCATION = -536846216;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_ARP_INVALID_ARP_PKT:
    _PKTMON_DROP_LOCATION = -536846215;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_ARP_INVALID_HDR: _PKTMON_DROP_LOCATION =
    -536846208;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_ARP_INVALID_ETHERNET_HDR:
    _PKTMON_DROP_LOCATION = -536846207;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_ARP_INVALID_IPADDRESS:
    _PKTMON_DROP_LOCATION = -536846206;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PROCESS_OUTGOING_ARP_PKT_LIMITER: _PKTMON_DROP_LOCATION =
    -536846205;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_RECEIVE_SINGLEDESTINATION_PORT_BLOCKED:
    _PKTMON_DROP_LOCATION = -536846204;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_RECEIVE_SINGLEDESTINATION_NIC_SUSPENDED:
    _PKTMON_DROP_LOCATION = -536846203;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_RECEIVE_MULTIPLEDESTINATION_PORT_BLOCKED:
    _PKTMON_DROP_LOCATION = -536846202;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_RECEIVE_MULTIPLEDESTINATION_NIC_SUSPENDED:
    _PKTMON_DROP_LOCATION = -536846201;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_SEND_NETBUFFERLISTS_PORT_BLOCKED: _PKTMON_DROP_LOCATION =
    -536846200;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_START_PROCESSING_PKT_NOT_PARSED: _PKTMON_DROP_LOCATION =
    -536846199;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_INTERCEPT_TRANSPORT_PROT_PKT_INTERCEPT:
    _PKTMON_DROP_LOCATION = -536846192;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_VFP_PROCESS_INCOMING_ARP_INVALID_ARP_PKT:
    _PKTMON_DROP_LOCATION = -536846191;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_VFP_PROCESS_INCOMING_ARP_HDR_EXTRACTION_FAIL:
    _PKTMON_DROP_LOCATION = -536846190;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_VFP_PROCESS_INCOMING_ARP_INVALID_IPADDRESS:
    _PKTMON_DROP_LOCATION = -536846189;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_VFP_PROCESS_INCOMING_ARP_NONUNICAST_RESPONSE:
    _PKTMON_DROP_LOCATION = -536846188;
pub const _PKTMON_DROP_LOCATION_PMLOC_VFP_PKTMON_SWITCH_CONTEXT_REG_DISABLED:
    _PKTMON_DROP_LOCATION = -536846187;
pub const _PKTMON_DROP_LOCATION_PMLOC_SLBMUX_PACKET_PARSE_FAIL: _PKTMON_DROP_LOCATION = -536842239;
pub const _PKTMON_DROP_LOCATION_PMLOC_SLBMUX_ACT_TYPE_DROP: _PKTMON_DROP_LOCATION = -536842238;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_INBOUND_INIT: _PKTMON_DROP_LOCATION = -536838143;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_INBOUND_AUTH: _PKTMON_DROP_LOCATION = -536838142;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_INBOUND_AUTH_COMPLETE: _PKTMON_DROP_LOCATION =
    -536838141;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_INBOUND_DECRYPT: _PKTMON_DROP_LOCATION = -536838140;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_INBOUND_DECRYPT_COMPLETE: _PKTMON_DROP_LOCATION =
    -536838139;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_OUTBOUND_INIT: _PKTMON_DROP_LOCATION = -536838138;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_OUTBOUND_PROCESS: _PKTMON_DROP_LOCATION =
    -536838137;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ESP_OUTBOUND_COMPLETE: _PKTMON_DROP_LOCATION =
    -536838136;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_TL_PACKET_INBOUND_PROCESSING: _PKTMON_DROP_LOCATION =
    -536838135;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_TL_PACKET_OUTBOUND_PROCESSING: _PKTMON_DROP_LOCATION =
    -536838134;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_GET_SESSION_INFO: _PKTMON_DROP_LOCATION = -536838133;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_OUTBOUND_TUNNEL_CLASSIFY: _PKTMON_DROP_LOCATION =
    -536838132;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_INBOUND_TUNNEL_CLASSIFY: _PKTMON_DROP_LOCATION =
    -536838131;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_SEND_TUNNEL_DATAGRAM: _PKTMON_DROP_LOCATION =
    -536838130;
pub const _PKTMON_DROP_LOCATION_PMLOC_IPSEC_ASYNC_PEND_COMPLETE: _PKTMON_DROP_LOCATION = -536838129;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_NETPACKET_LAYOUT_PARSE_FAIL: _PKTMON_DROP_LOCATION =
    -536834047;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_SOFTWARE_CHECKSUM_FAILURE: _PKTMON_DROP_LOCATION =
    -536834046;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_NIC_QUEUE_STOP: _PKTMON_DROP_LOCATION = -536834045;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_INVALID_NETBUFFER_LENGTH: _PKTMON_DROP_LOCATION =
    -536834044;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_NBL_LSO_FAILURE: _PKTMON_DROP_LOCATION = -536834043;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_NBL_USO_FAILURE: _PKTMON_DROP_LOCATION = -536834042;
pub const _PKTMON_DROP_LOCATION_PMLOC_NETCX_BUFFER_BOUNCE_FAILURE: _PKTMON_DROP_LOCATION =
    -536834041;
pub type _PKTMON_DROP_LOCATION = ::std::os::raw::c_int;
pub use self::_PKTMON_DROP_LOCATION as PKTMON_DROP_LOCATION;
pub const _PKTMON_DROP_REASON_PktMonDrop_Unknown: _PKTMON_DROP_REASON = 0;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidData: _PKTMON_DROP_REASON = 1;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidPacket: _PKTMON_DROP_REASON = 2;
pub const _PKTMON_DROP_REASON_PktMonDrop_Resources: _PKTMON_DROP_REASON = 3;
pub const _PKTMON_DROP_REASON_PktMonDrop_NotReady: _PKTMON_DROP_REASON = 4;
pub const _PKTMON_DROP_REASON_PktMonDrop_Disconnected: _PKTMON_DROP_REASON = 5;
pub const _PKTMON_DROP_REASON_PktMonDrop_NotAccepted: _PKTMON_DROP_REASON = 6;
pub const _PKTMON_DROP_REASON_PktMonDrop_Busy: _PKTMON_DROP_REASON = 7;
pub const _PKTMON_DROP_REASON_PktMonDrop_Filtered: _PKTMON_DROP_REASON = 8;
pub const _PKTMON_DROP_REASON_PktMonDrop_FilteredVLAN: _PKTMON_DROP_REASON = 9;
pub const _PKTMON_DROP_REASON_PktMonDrop_UnauthorizedVLAN: _PKTMON_DROP_REASON = 10;
pub const _PKTMON_DROP_REASON_PktMonDrop_UnauthorizedMAC: _PKTMON_DROP_REASON = 11;
pub const _PKTMON_DROP_REASON_PktMonDrop_FailedSecurityPolicy: _PKTMON_DROP_REASON = 12;
pub const _PKTMON_DROP_REASON_PktMonDrop_FailedPvlanSetting: _PKTMON_DROP_REASON = 13;
pub const _PKTMON_DROP_REASON_PktMonDrop_Qos: _PKTMON_DROP_REASON = 14;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec: _PKTMON_DROP_REASON = 15;
pub const _PKTMON_DROP_REASON_PktMonDrop_MacSpoofing: _PKTMON_DROP_REASON = 16;
pub const _PKTMON_DROP_REASON_PktMonDrop_DhcpGuard: _PKTMON_DROP_REASON = 17;
pub const _PKTMON_DROP_REASON_PktMonDrop_RouterGuard: _PKTMON_DROP_REASON = 18;
pub const _PKTMON_DROP_REASON_PktMonDrop_BridgeReserved: _PKTMON_DROP_REASON = 19;
pub const _PKTMON_DROP_REASON_PktMonDrop_VirtualSubnetId: _PKTMON_DROP_REASON = 20;
pub const _PKTMON_DROP_REASON_PktMonDrop_RequiredExtensionMissing: _PKTMON_DROP_REASON = 21;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidConfig: _PKTMON_DROP_REASON = 22;
pub const _PKTMON_DROP_REASON_PktMonDrop_MTUMismatch: _PKTMON_DROP_REASON = 23;
pub const _PKTMON_DROP_REASON_PktMonDrop_NativeFwdingReq: _PKTMON_DROP_REASON = 24;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidVlanFormat: _PKTMON_DROP_REASON = 25;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidDestMac: _PKTMON_DROP_REASON = 26;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidSourceMac: _PKTMON_DROP_REASON = 27;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidFirstNBTooSmall: _PKTMON_DROP_REASON = 28;
pub const _PKTMON_DROP_REASON_PktMonDrop_Wnv: _PKTMON_DROP_REASON = 29;
pub const _PKTMON_DROP_REASON_PktMonDrop_StormLimit: _PKTMON_DROP_REASON = 30;
pub const _PKTMON_DROP_REASON_PktMonDrop_InjectedIcmp: _PKTMON_DROP_REASON = 31;
pub const _PKTMON_DROP_REASON_PktMonDrop_FailedDestinationListUpdate: _PKTMON_DROP_REASON = 32;
pub const _PKTMON_DROP_REASON_PktMonDrop_NicDisabled: _PKTMON_DROP_REASON = 33;
pub const _PKTMON_DROP_REASON_PktMonDrop_FailedPacketFilter: _PKTMON_DROP_REASON = 34;
pub const _PKTMON_DROP_REASON_PktMonDrop_SwitchDataFlowDisabled: _PKTMON_DROP_REASON = 35;
pub const _PKTMON_DROP_REASON_PktMonDrop_FilteredIsolationUntagged: _PKTMON_DROP_REASON = 36;
pub const _PKTMON_DROP_REASON_PktMonDrop_InvalidPDQueue: _PKTMON_DROP_REASON = 37;
pub const _PKTMON_DROP_REASON_PktMonDrop_LowPower: _PKTMON_DROP_REASON = 38;
pub const _PKTMON_DROP_REASON_PktMonDrop_Pause: _PKTMON_DROP_REASON = 201;
pub const _PKTMON_DROP_REASON_PktMonDrop_Reset: _PKTMON_DROP_REASON = 202;
pub const _PKTMON_DROP_REASON_PktMonDrop_SendAborted: _PKTMON_DROP_REASON = 203;
pub const _PKTMON_DROP_REASON_PktMonDrop_ProtocolNotBound: _PKTMON_DROP_REASON = 204;
pub const _PKTMON_DROP_REASON_PktMonDrop_MicroportError: _PKTMON_DROP_REASON = 401;
pub const _PKTMON_DROP_REASON_PktMonDrop_VfNotReady: _PKTMON_DROP_REASON = 402;
pub const _PKTMON_DROP_REASON_PktMonDrop_MicroportNotReady: _PKTMON_DROP_REASON = 403;
pub const _PKTMON_DROP_REASON_PktMonDrop_VMBusError: _PKTMON_DROP_REASON = 404;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_LoopbackPacket: _PKTMON_DROP_REASON = 601;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidSnapHeader: _PKTMON_DROP_REASON = 602;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidEthernetType: _PKTMON_DROP_REASON = 603;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidPacketLength: _PKTMON_DROP_REASON = 604;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_HeaderNotContiguous: _PKTMON_DROP_REASON = 605;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidDestinationType: _PKTMON_DROP_REASON = 606;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InterfaceNotReady: _PKTMON_DROP_REASON = 607;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_ProviderNotReady: _PKTMON_DROP_REASON = 608;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidLsoInfo: _PKTMON_DROP_REASON = 609;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidUsoInfo: _PKTMON_DROP_REASON = 610;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidMedium: _PKTMON_DROP_REASON = 611;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_InvalidArpHeader: _PKTMON_DROP_REASON = 612;
pub const _PKTMON_DROP_REASON_PktMonDrop_FL_NoClientInterface: _PKTMON_DROP_REASON = 613;
pub const _PKTMON_DROP_REASON_PktMonDrop_ArpGuard: _PKTMON_DROP_REASON = 701;
pub const _PKTMON_DROP_REASON_PktMonDrop_ArpLimiter: _PKTMON_DROP_REASON = 702;
pub const _PKTMON_DROP_REASON_PktMonDrop_DhcpLimiter: _PKTMON_DROP_REASON = 703;
pub const _PKTMON_DROP_REASON_PktMonDrop_BlockBroadcast: _PKTMON_DROP_REASON = 704;
pub const _PKTMON_DROP_REASON_PktMonDrop_BlockNonIp: _PKTMON_DROP_REASON = 705;
pub const _PKTMON_DROP_REASON_PktMonDrop_ArpFilter: _PKTMON_DROP_REASON = 706;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipv4Guard: _PKTMON_DROP_REASON = 707;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipv6Guard: _PKTMON_DROP_REASON = 708;
pub const _PKTMON_DROP_REASON_PktMonDrop_MacGuard: _PKTMON_DROP_REASON = 709;
pub const _PKTMON_DROP_REASON_PktMonDrop_BroadcastNoDestinations: _PKTMON_DROP_REASON = 710;
pub const _PKTMON_DROP_REASON_PktMonDrop_UnicastNoDestination: _PKTMON_DROP_REASON = 711;
pub const _PKTMON_DROP_REASON_PktMonDrop_UnicastPortNotReady: _PKTMON_DROP_REASON = 712;
pub const _PKTMON_DROP_REASON_PktMonDrop_SwitchCallbackFailed: _PKTMON_DROP_REASON = 713;
pub const _PKTMON_DROP_REASON_PktMonDrop_Icmpv6Limiter: _PKTMON_DROP_REASON = 714;
pub const _PKTMON_DROP_REASON_PktMonDrop_Intercept: _PKTMON_DROP_REASON = 715;
pub const _PKTMON_DROP_REASON_PktMonDrop_InterceptBlock: _PKTMON_DROP_REASON = 716;
pub const _PKTMON_DROP_REASON_PktMonDrop_NDPGuard: _PKTMON_DROP_REASON = 717;
pub const _PKTMON_DROP_REASON_PktMonDrop_PortBlocked: _PKTMON_DROP_REASON = 718;
pub const _PKTMON_DROP_REASON_PktMonDrop_NicSuspended: _PKTMON_DROP_REASON = 719;
pub const _PKTMON_DROP_REASON_PktMonDrop_Http_ReceiveSuppressed: _PKTMON_DROP_REASON = 801;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BadSourceAddress: _PKTMON_DROP_REASON = 901;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_NotLocallyDestined: _PKTMON_DROP_REASON = 902;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ProtocolUnreachable: _PKTMON_DROP_REASON = 903;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_PortUnreachable: _PKTMON_DROP_REASON = 904;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BadLength: _PKTMON_DROP_REASON = 905;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_MalformedHeader: _PKTMON_DROP_REASON = 906;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_NoRoute: _PKTMON_DROP_REASON = 907;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BeyondScope: _PKTMON_DROP_REASON = 908;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_InspectionDrop: _PKTMON_DROP_REASON = 909;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_TooManyDecapsulations: _PKTMON_DROP_REASON = 910;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AdministrativelyProhibited: _PKTMON_DROP_REASON = 911;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BadChecksum: _PKTMON_DROP_REASON = 912;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ReceivePathMax: _PKTMON_DROP_REASON = 913;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_HopLimitExceeded: _PKTMON_DROP_REASON = 914;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AddressUnreachable: _PKTMON_DROP_REASON = 915;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_RscPacket: _PKTMON_DROP_REASON = 916;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ForwardPathMax: _PKTMON_DROP_REASON = 917;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ArbitrationUnhandled: _PKTMON_DROP_REASON = 918;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_InspectionAbsorb: _PKTMON_DROP_REASON = 919;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_DontFragmentMtuExceeded: _PKTMON_DROP_REASON = 920;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BufferLengthExceeded: _PKTMON_DROP_REASON = 921;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AddressResolutionTimeout: _PKTMON_DROP_REASON = 922;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AddressResolutionFailure: _PKTMON_DROP_REASON = 923;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsecFailure: _PKTMON_DROP_REASON = 924;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ExtensionHeadersFailure: _PKTMON_DROP_REASON = 925;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiClientDrop: _PKTMON_DROP_REASON = 926;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_UnsupportedOffload: _PKTMON_DROP_REASON = 927;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_RoutingFailure: _PKTMON_DROP_REASON = 928;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AncillaryDataFailure: _PKTMON_DROP_REASON = 929;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_RawDataFailure: _PKTMON_DROP_REASON = 930;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_SessionStateFailure: _PKTMON_DROP_REASON = 931;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiModifiedButNotForwarded: _PKTMON_DROP_REASON =
    932;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiNoNextHop: _PKTMON_DROP_REASON = 933;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiNoCompartment: _PKTMON_DROP_REASON = 934;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiNoInterface: _PKTMON_DROP_REASON = 935;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiNoSubInterface: _PKTMON_DROP_REASON = 936;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiInterfaceDisabled: _PKTMON_DROP_REASON = 937;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiSegmentationFailed: _PKTMON_DROP_REASON = 938;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiNoEthernetHeader: _PKTMON_DROP_REASON = 939;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiUnexpectedFragment: _PKTMON_DROP_REASON = 940;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiUnsupportedInterfaceType: _PKTMON_DROP_REASON =
    941;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiInvalidLsoInfo: _PKTMON_DROP_REASON = 942;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiInvalidUsoInfo: _PKTMON_DROP_REASON = 943;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_InternalError: _PKTMON_DROP_REASON = 944;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_AdministrativelyConfigured: _PKTMON_DROP_REASON = 945;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_BadOption: _PKTMON_DROP_REASON = 946;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_LoopbackDisallowed: _PKTMON_DROP_REASON = 947;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_SmallerScope: _PKTMON_DROP_REASON = 948;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_QueueFull: _PKTMON_DROP_REASON = 949;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_InterfaceDisabled: _PKTMON_DROP_REASON = 950;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpGeneric: _PKTMON_DROP_REASON = 951;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpTruncatedHeader: _PKTMON_DROP_REASON = 952;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidChecksum: _PKTMON_DROP_REASON = 953;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInspection: _PKTMON_DROP_REASON = 954;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNeighborDiscoveryLoopback: _PKTMON_DROP_REASON =
    955;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpUnknownType: _PKTMON_DROP_REASON = 956;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpTruncatedIpHeader: _PKTMON_DROP_REASON = 957;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpOversizedIpHeader: _PKTMON_DROP_REASON = 958;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNoHandler: _PKTMON_DROP_REASON = 959;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpRespondingToError: _PKTMON_DROP_REASON = 960;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidSource: _PKTMON_DROP_REASON = 961;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInterfaceRateLimit: _PKTMON_DROP_REASON = 962;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpPathRateLimit: _PKTMON_DROP_REASON = 963;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNoRoute: _PKTMON_DROP_REASON = 964;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpMatchingRequestNotFound: _PKTMON_DROP_REASON = 965;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpBufferTooSmall: _PKTMON_DROP_REASON = 966;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpAncillaryDataQuery: _PKTMON_DROP_REASON = 967;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpIncorrectHopLimit: _PKTMON_DROP_REASON = 968;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpUnknownCode: _PKTMON_DROP_REASON = 969;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpSourceNotLinkLocal: _PKTMON_DROP_REASON = 970;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpTruncatedNdHeader: _PKTMON_DROP_REASON = 971;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptSourceLinkAddr: _PKTMON_DROP_REASON =
    972;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptMtu: _PKTMON_DROP_REASON = 973;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptPrefixInformation: _PKTMON_DROP_REASON =
    974;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptRouteInformation: _PKTMON_DROP_REASON =
    975;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptRdnss: _PKTMON_DROP_REASON = 976;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdOptDnssl: _PKTMON_DROP_REASON = 977;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpPacketParsingFailure: _PKTMON_DROP_REASON = 978;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpDisallowed: _PKTMON_DROP_REASON = 979;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidRouterAdvertisement: _PKTMON_DROP_REASON =
    980;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpSourceFromDifferentLink: _PKTMON_DROP_REASON = 981;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidRedirectDestinationOrTarget:
    _PKTMON_DROP_REASON = 982;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidNdTarget: _PKTMON_DROP_REASON = 983;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNaMulticastAndSolicited: _PKTMON_DROP_REASON = 984;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNdLinkLayerAddressIsLocal: _PKTMON_DROP_REASON =
    985;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpDuplicateEchoRequest: _PKTMON_DROP_REASON = 986;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNotAPotentialRouter: _PKTMON_DROP_REASON = 987;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidMldQuery: _PKTMON_DROP_REASON = 988;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpInvalidMldReport: _PKTMON_DROP_REASON = 989;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpLocallySourcedMldReport: _PKTMON_DROP_REASON = 990;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IcmpNotLocallyDestined: _PKTMON_DROP_REASON = 991;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ArpInvalidSource: _PKTMON_DROP_REASON = 992;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ArpInvalidTarget: _PKTMON_DROP_REASON = 993;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ArpDlSourceIsLocal: _PKTMON_DROP_REASON = 994;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_ArpNotLocallyDestined: _PKTMON_DROP_REASON = 995;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_NlClientDiscard: _PKTMON_DROP_REASON = 996;
pub const _PKTMON_DROP_REASON_PktMonDrop_NL_IpsnpiUroSegmentSizeExceedsMtu: _PKTMON_DROP_REASON =
    997;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SourceUnspecified: _PKTMON_DROP_REASON = 1200;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_DestinationMulticast: _PKTMON_DROP_REASON = 1201;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_HeaderInvalid: _PKTMON_DROP_REASON = 1202;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ChecksumInvalid: _PKTMON_DROP_REASON = 1203;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_EndpointNotFound: _PKTMON_DROP_REASON = 1204;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ConnectedPath: _PKTMON_DROP_REASON = 1205;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SessionState: _PKTMON_DROP_REASON = 1206;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ReceiveInspection: _PKTMON_DROP_REASON = 1207;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_AckInvalid: _PKTMON_DROP_REASON = 1208;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ExpectedSyn: _PKTMON_DROP_REASON = 1209;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_Rst: _PKTMON_DROP_REASON = 1210;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SynRcvdSyn: _PKTMON_DROP_REASON = 1211;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SimultaneousConnect: _PKTMON_DROP_REASON = 1212;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_PawsFailed: _PKTMON_DROP_REASON = 1213;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_LandAttack: _PKTMON_DROP_REASON = 1214;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_MissedReset: _PKTMON_DROP_REASON = 1215;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_OutsideWindow: _PKTMON_DROP_REASON = 1216;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_DuplicateSegment: _PKTMON_DROP_REASON = 1217;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ClosedWindow: _PKTMON_DROP_REASON = 1218;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_TcbRemoved: _PKTMON_DROP_REASON = 1219;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_FinWait2: _PKTMON_DROP_REASON = 1220;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ReassemblyConflict: _PKTMON_DROP_REASON = 1221;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_FinReceived: _PKTMON_DROP_REASON = 1222;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_ListenerInvalidFlags: _PKTMON_DROP_REASON = 1223;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_TcbNotInTcbTable: _PKTMON_DROP_REASON = 1224;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_TimeWaitTcbReceivedRstOutsideWindow:
    _PKTMON_DROP_REASON = 1225;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_TimeWaitTcbSynAndOtherFlags: _PKTMON_DROP_REASON =
    1226;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_TimeWaitTcb: _PKTMON_DROP_REASON = 1227;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SynAckWithFastopenCookieRequest: _PKTMON_DROP_REASON =
    1228;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_PauseAccept: _PKTMON_DROP_REASON = 1229;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_SynAttack: _PKTMON_DROP_REASON = 1230;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_AcceptInspection: _PKTMON_DROP_REASON = 1231;
pub const _PKTMON_DROP_REASON_PktMonDrop_INET_AcceptRedirection: _PKTMON_DROP_REASON = 1232;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_ParsingFailure: _PKTMON_DROP_REASON = 1301;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_FirstFragmentMiss: _PKTMON_DROP_REASON = 1302;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_ICMPErrorPayloadValidationFailure:
    _PKTMON_DROP_REASON = 1303;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_ICMPErrorPacketMatchNoSession: _PKTMON_DROP_REASON =
    1304;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_ExternalHairpinNexthopLookupFailure:
    _PKTMON_DROP_REASON = 1305;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NoMatchingStaticMapping: _PKTMON_DROP_REASON = 1306;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NexthopReferenceFailure: _PKTMON_DROP_REASON = 1307;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_CloningFailure: _PKTMON_DROP_REASON = 1308;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_TranslationFailure: _PKTMON_DROP_REASON = 1309;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_HopLimitExceeded: _PKTMON_DROP_REASON = 1310;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_PacketBiggerThanMTU: _PKTMON_DROP_REASON = 1311;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_UnexpectedRouteLookupFailure: _PKTMON_DROP_REASON =
    1312;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NoRoute: _PKTMON_DROP_REASON = 1313;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_SessionCreationFailure: _PKTMON_DROP_REASON = 1314;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NexthopNotOverExternalInterface:
    _PKTMON_DROP_REASON = 1315;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NexthopExternalInterfaceMissNATInstance:
    _PKTMON_DROP_REASON = 1316;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_NATItselfCantBeInternalNexthop:
    _PKTMON_DROP_REASON = 1317;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_PacketRoutableInItsArrivalCompartment:
    _PKTMON_DROP_REASON = 1318;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_PacketTransportProtocolNotSupported:
    _PKTMON_DROP_REASON = 1319;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_PacketIsDestinedLocally: _PKTMON_DROP_REASON = 1320;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_PacketDestinationIPandPortNotSubjectToNAT:
    _PKTMON_DROP_REASON = 1321;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_MuxReject: _PKTMON_DROP_REASON = 1322;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_DipLookupFailure: _PKTMON_DROP_REASON = 1323;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_MuxEncapsulationFailure: _PKTMON_DROP_REASON = 1324;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_InvalidDiagPacketEncapType: _PKTMON_DROP_REASON =
    1325;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_DiagPacketIsRedirect: _PKTMON_DROP_REASON = 1326;
pub const _PKTMON_DROP_REASON_PktMonDrop_SlbMux_UnableToHandleRedirect: _PKTMON_DROP_REASON = 1327;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_BadSpi: _PKTMON_DROP_REASON = 1401;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_SALifetimeExpired: _PKTMON_DROP_REASON = 1402;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_WrongSA: _PKTMON_DROP_REASON = 1403;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_ReplayCheckFailed: _PKTMON_DROP_REASON = 1404;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_InvalidPacket: _PKTMON_DROP_REASON = 1405;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_IntegrityCheckFailed: _PKTMON_DROP_REASON = 1406;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_ClearTextDrop: _PKTMON_DROP_REASON = 1407;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_AuthFirewallDrop: _PKTMON_DROP_REASON = 1408;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_ThrottleDrop: _PKTMON_DROP_REASON = 1409;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_Block: _PKTMON_DROP_REASON = 1410;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_ReceivedMulticast: _PKTMON_DROP_REASON = 1411;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_InvalidPacket: _PKTMON_DROP_REASON = 1412;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_StateLookupFailed: _PKTMON_DROP_REASON = 1413;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_MaxEntries: _PKTMON_DROP_REASON = 1414;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_KeymodNotAllowed: _PKTMON_DROP_REASON = 1415;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Dosp_MaxPerIpRateLimitQueues: _PKTMON_DROP_REASON =
    1416;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_NoMemory: _PKTMON_DROP_REASON = 1417;
pub const _PKTMON_DROP_REASON_PktMonDrop_Ipsec_Unsuccessful: _PKTMON_DROP_REASON = 1418;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_NetPacketLayoutParseFailure: _PKTMON_DROP_REASON =
    1501;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_SoftwareChecksumFailure: _PKTMON_DROP_REASON = 1502;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_NicQueueStop: _PKTMON_DROP_REASON = 1503;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_InvalidNetBufferLength: _PKTMON_DROP_REASON = 1504;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_LSOFailure: _PKTMON_DROP_REASON = 1505;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_USOFailure: _PKTMON_DROP_REASON = 1506;
pub const _PKTMON_DROP_REASON_PktMonDrop_NetCx_BufferBounceFailureAndPacketIgnore:
    _PKTMON_DROP_REASON = 1507;
pub type _PKTMON_DROP_REASON = ::std::os::raw::c_int;
pub use self::_PKTMON_DROP_REASON as PKTMON_DROP_REASON;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_STREAM_START_INFO_OUT {
    pub PacketBufferSizeInBytes: ULONG,
    pub TruncationSize: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_START_INFO_OUT"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_START_INFO_OUT>() - 8usize];
    ["Alignment of PACKETMONITOR_STREAM_START_INFO_OUT"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_START_INFO_OUT>() - 4usize];
    ["Offset of field: PACKETMONITOR_STREAM_START_INFO_OUT::PacketBufferSizeInBytes"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_START_INFO_OUT,
        PacketBufferSizeInBytes
    ) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_START_INFO_OUT::TruncationSize"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_START_INFO_OUT, TruncationSize) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_STREAM_STOP_INFO_OUT {
    pub IsFatalError: BOOLEAN,
    pub Reason: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_STOP_INFO_OUT"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_STOP_INFO_OUT>() - 8usize];
    ["Alignment of PACKETMONITOR_STREAM_STOP_INFO_OUT"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_STOP_INFO_OUT>() - 4usize];
    ["Offset of field: PACKETMONITOR_STREAM_STOP_INFO_OUT::IsFatalError"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_STOP_INFO_OUT, IsFatalError) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_STOP_INFO_OUT::Reason"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_STOP_INFO_OUT, Reason) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_STREAM_PROCESS_INFO_OUT {
    pub IsWarning: BOOLEAN,
    pub Reason: DWORD,
    pub PacketLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_PROCESS_INFO_OUT"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_PROCESS_INFO_OUT>() - 16usize];
    ["Alignment of PACKETMONITOR_STREAM_PROCESS_INFO_OUT"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_PROCESS_INFO_OUT>() - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_PROCESS_INFO_OUT::IsWarning"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_PROCESS_INFO_OUT, IsWarning) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_PROCESS_INFO_OUT::Reason"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_PROCESS_INFO_OUT, Reason) - 4usize];
    ["Offset of field: PACKETMONITOR_STREAM_PROCESS_INFO_OUT::PacketLength"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_PROCESS_INFO_OUT, PacketLength) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PACKETMONITOR_STREAM_EVENT_INFO {
    pub __bindgen_anon_1: PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1 {
    pub StreamStartInfo: PACKETMONITOR_STREAM_START_INFO_OUT,
    pub StreamStopInfo: PACKETMONITOR_STREAM_STOP_INFO_OUT,
    pub StreamProcessInfo: PACKETMONITOR_STREAM_PROCESS_INFO_OUT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1>() - 16usize];
    ["Alignment of PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1>() - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1::StreamStartInfo"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1,
        StreamStartInfo
    ) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1::StreamStopInfo"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1,
        StreamStopInfo
    ) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1::StreamProcessInfo"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_EVENT_INFO__bindgen_ty_1,
        StreamProcessInfo
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_EVENT_INFO"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_EVENT_INFO>() - 16usize];
    ["Alignment of PACKETMONITOR_STREAM_EVENT_INFO"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_EVENT_INFO>() - 8usize];
};
pub const PACKETMONITOR_STREAM_EVENT_KIND_PacketMonitorStreamEventStarted:
    PACKETMONITOR_STREAM_EVENT_KIND = 0;
pub const PACKETMONITOR_STREAM_EVENT_KIND_PacketMonitorStreamEventStopped:
    PACKETMONITOR_STREAM_EVENT_KIND = 1;
pub const PACKETMONITOR_STREAM_EVENT_KIND_PacketMonitorStreamEventFatalError:
    PACKETMONITOR_STREAM_EVENT_KIND = 2;
pub const PACKETMONITOR_STREAM_EVENT_KIND_PacketMonitorStreamEventProcessInfo:
    PACKETMONITOR_STREAM_EVENT_KIND = 3;
pub type PACKETMONITOR_STREAM_EVENT_KIND = ::std::os::raw::c_int;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_Unknown: _PKTMON_PACKET_TYPE = 0;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_Ethernet: _PKTMON_PACKET_TYPE = 1;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_WiFi: _PKTMON_PACKET_TYPE = 2;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_IP: _PKTMON_PACKET_TYPE = 3;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_HTTP: _PKTMON_PACKET_TYPE = 4;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_TCP: _PKTMON_PACKET_TYPE = 5;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_UDP: _PKTMON_PACKET_TYPE = 6;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_ARP: _PKTMON_PACKET_TYPE = 7;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_ICMP: _PKTMON_PACKET_TYPE = 8;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_ESP: _PKTMON_PACKET_TYPE = 9;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_AH: _PKTMON_PACKET_TYPE = 10;
pub const _PKTMON_PACKET_TYPE_PktMonPayload_L4Payload: _PKTMON_PACKET_TYPE = 11;
pub type _PKTMON_PACKET_TYPE = ::std::os::raw::c_int;
pub use self::_PKTMON_PACKET_TYPE as PKTMON_PACKET_TYPE;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Unspecified: PKTMON_DIRECTION_TAG = 0;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_In: PKTMON_DIRECTION_TAG = 1;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Out: PKTMON_DIRECTION_TAG = 2;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Rx: PKTMON_DIRECTION_TAG = 3;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Tx: PKTMON_DIRECTION_TAG = 4;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Ingress: PKTMON_DIRECTION_TAG = 5;
pub const PKTMON_DIRECTION_TAG_PktMonDirTag_Egress: PKTMON_DIRECTION_TAG = 6;
pub type PKTMON_DIRECTION_TAG = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PACKETMONITOR_STREAM_METADATA {
    pub PktGroupId: UINT64,
    pub PktCount: UINT16,
    pub AppearanceCount: UINT16,
    pub DirectionName: UINT16,
    pub PacketType: UINT16,
    pub ComponentId: UINT16,
    pub EdgeId: UINT16,
    pub Reserved: UINT16,
    pub DropReason: UINT32,
    pub DropLocation: UINT32,
    pub Processor: UINT16,
    pub TimeStamp: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_METADATA"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_METADATA>() - 48usize];
    ["Alignment of PACKETMONITOR_STREAM_METADATA"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_METADATA>() - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::PktGroupId"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, PktGroupId) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::PktCount"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, PktCount) - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::AppearanceCount"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, AppearanceCount) - 10usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::DirectionName"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, DirectionName) - 12usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::PacketType"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, PacketType) - 14usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::ComponentId"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, ComponentId) - 16usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::EdgeId"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, EdgeId) - 18usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::Reserved"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, Reserved) - 20usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::DropReason"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, DropReason) - 24usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::DropLocation"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, DropLocation) - 28usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::Processor"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, Processor) - 32usize];
    ["Offset of field: PACKETMONITOR_STREAM_METADATA::TimeStamp"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_METADATA, TimeStamp) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_STREAM_DATA_DESCRIPTOR {
    pub Data: *const ::std::os::raw::c_void,
    pub DataSize: UINT32,
    pub MetadataOffset: UINT32,
    pub PacketOffset: UINT32,
    pub PacketLength: UINT32,
    pub MissedPacketWriteCount: UINT32,
    pub MissedPacketReadCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_STREAM_DATA_DESCRIPTOR"]
        [::std::mem::size_of::<PACKETMONITOR_STREAM_DATA_DESCRIPTOR>() - 32usize];
    ["Alignment of PACKETMONITOR_STREAM_DATA_DESCRIPTOR"]
        [::std::mem::align_of::<PACKETMONITOR_STREAM_DATA_DESCRIPTOR>() - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::Data"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_DATA_DESCRIPTOR, Data) - 0usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::DataSize"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_DATA_DESCRIPTOR, DataSize) - 8usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::MetadataOffset"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_DATA_DESCRIPTOR, MetadataOffset) - 12usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::PacketOffset"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_DATA_DESCRIPTOR, PacketOffset) - 16usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::PacketLength"]
        [::std::mem::offset_of!(PACKETMONITOR_STREAM_DATA_DESCRIPTOR, PacketLength) - 20usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::MissedPacketWriteCount"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_DATA_DESCRIPTOR,
        MissedPacketWriteCount
    ) - 24usize];
    ["Offset of field: PACKETMONITOR_STREAM_DATA_DESCRIPTOR::MissedPacketReadCount"][::std::mem::offset_of!(
        PACKETMONITOR_STREAM_DATA_DESCRIPTOR,
        MissedPacketReadCount
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_REALTIME_STREAM_CONFIGURATION {
    pub UserContext: *mut ::std::os::raw::c_void,
    pub EventCallback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const PACKETMONITOR_STREAM_EVENT_INFO,
            arg3: PACKETMONITOR_STREAM_EVENT_KIND,
        ),
    >,
    pub DataCallback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const PACKETMONITOR_STREAM_DATA_DESCRIPTOR,
        ),
    >,
    pub BufferSizeMultiplier: UINT16,
    pub TruncationSize: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_REALTIME_STREAM_CONFIGURATION"]
        [::std::mem::size_of::<PACKETMONITOR_REALTIME_STREAM_CONFIGURATION>() - 32usize];
    ["Alignment of PACKETMONITOR_REALTIME_STREAM_CONFIGURATION"]
        [::std::mem::align_of::<PACKETMONITOR_REALTIME_STREAM_CONFIGURATION>() - 8usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM_CONFIGURATION::UserContext"]
        [::std::mem::offset_of!(PACKETMONITOR_REALTIME_STREAM_CONFIGURATION, UserContext) - 0usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM_CONFIGURATION::EventCallback"][::std::mem::offset_of!(
        PACKETMONITOR_REALTIME_STREAM_CONFIGURATION,
        EventCallback
    ) - 8usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM_CONFIGURATION::DataCallback"][::std::mem::offset_of!(
        PACKETMONITOR_REALTIME_STREAM_CONFIGURATION,
        DataCallback
    ) - 16usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM_CONFIGURATION::BufferSizeMultiplier"][::std::mem::offset_of!(
        PACKETMONITOR_REALTIME_STREAM_CONFIGURATION,
        BufferSizeMultiplier
    )
        - 24usize];
    ["Offset of field: PACKETMONITOR_REALTIME_STREAM_CONFIGURATION::TruncationSize"][::std::mem::offset_of!(
        PACKETMONITOR_REALTIME_STREAM_CONFIGURATION,
        TruncationSize
    ) - 26usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PACKETMONITOR_PROTOCOL_CONSTRAINT {
    pub Name: [WCHAR; 64usize],
    pub __bindgen_anon_1: PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1,
    pub Mac1: [UCHAR; 6usize],
    pub Mac2: [UCHAR; 6usize],
    pub VlanId: USHORT,
    pub EtherType: USHORT,
    pub DSCP: USHORT,
    pub TransportProtocol: UCHAR,
    pub Ip1: PACKETMONITOR_IP_ADDRESS,
    pub Ip2: PACKETMONITOR_IP_ADDRESS,
    pub PrefixLength1: UCHAR,
    pub PrefixLength2: UCHAR,
    pub Port1: USHORT,
    pub Port2: USHORT,
    pub TCPFlags: UCHAR,
    pub EncapType: ULONG,
    pub VxLanPort: USHORT,
    pub Packets: UINT64,
    pub Bytes: UINT64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1 {
    pub IsPresent: PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1,
    pub IsPresentValue: UINT,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Mac1(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Mac1(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Mac1_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Mac1_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Mac2(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Mac2(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Mac2_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Mac2_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn VlanId(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_VlanId(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn VlanId_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_VlanId_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EtherType(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EtherType(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EtherType_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EtherType_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DSCP(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DSCP(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DSCP_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DSCP_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn TransportProtocol(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_TransportProtocol(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TransportProtocol_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_TransportProtocol_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Ip1(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Ip1(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Ip1_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Ip1_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Ip2(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Ip2(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Ip2_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Ip2_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IPv6(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IPv6(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IPv6_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IPv6_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn PrefixLength1(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_PrefixLength1(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PrefixLength1_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PrefixLength1_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn PrefixLength2(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_PrefixLength2(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PrefixLength2_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PrefixLength2_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Port1(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Port1(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Port1_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Port1_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Port2(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Port2(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Port2_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Port2_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn TCPFlags(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_TCPFlags(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TCPFlags_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_TCPFlags_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EncapType(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EncapType(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EncapType_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EncapType_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn VxLanPort(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_VxLanPort(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn VxLanPort_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_VxLanPort_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ClusterHeartbeat(&self) -> UINT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ClusterHeartbeat(&mut self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ClusterHeartbeat_raw(this: *const Self) -> UINT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ClusterHeartbeat_raw(this: *mut Self, val: UINT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Mac1: UINT,
        Mac2: UINT,
        VlanId: UINT,
        EtherType: UINT,
        DSCP: UINT,
        TransportProtocol: UINT,
        Ip1: UINT,
        Ip2: UINT,
        IPv6: UINT,
        PrefixLength1: UINT,
        PrefixLength2: UINT,
        Port1: UINT,
        Port2: UINT,
        TCPFlags: UINT,
        EncapType: UINT,
        VxLanPort: UINT,
        ClusterHeartbeat: UINT,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Mac1: u32 = unsafe { ::std::mem::transmute(Mac1) };
            Mac1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Mac2: u32 = unsafe { ::std::mem::transmute(Mac2) };
            Mac2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let VlanId: u32 = unsafe { ::std::mem::transmute(VlanId) };
            VlanId as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let EtherType: u32 = unsafe { ::std::mem::transmute(EtherType) };
            EtherType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let DSCP: u32 = unsafe { ::std::mem::transmute(DSCP) };
            DSCP as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let TransportProtocol: u32 = unsafe { ::std::mem::transmute(TransportProtocol) };
            TransportProtocol as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let Ip1: u32 = unsafe { ::std::mem::transmute(Ip1) };
            Ip1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let Ip2: u32 = unsafe { ::std::mem::transmute(Ip2) };
            Ip2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let IPv6: u32 = unsafe { ::std::mem::transmute(IPv6) };
            IPv6 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let PrefixLength1: u32 = unsafe { ::std::mem::transmute(PrefixLength1) };
            PrefixLength1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let PrefixLength2: u32 = unsafe { ::std::mem::transmute(PrefixLength2) };
            PrefixLength2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let Port1: u32 = unsafe { ::std::mem::transmute(Port1) };
            Port1 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let Port2: u32 = unsafe { ::std::mem::transmute(Port2) };
            Port2 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let TCPFlags: u32 = unsafe { ::std::mem::transmute(TCPFlags) };
            TCPFlags as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let EncapType: u32 = unsafe { ::std::mem::transmute(EncapType) };
            EncapType as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let VxLanPort: u32 = unsafe { ::std::mem::transmute(VxLanPort) };
            VxLanPort as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let ClusterHeartbeat: u32 = unsafe { ::std::mem::transmute(ClusterHeartbeat) };
            ClusterHeartbeat as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1"]
        [::std::mem::size_of::<PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1>() - 4usize];
    ["Alignment of PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1"]
        [::std::mem::align_of::<PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1>() - 4usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1::IsPresent"][::std::mem::offset_of!(
        PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1,
        IsPresent
    ) - 0usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1::IsPresentValue"][::std::mem::offset_of!(
        PACKETMONITOR_PROTOCOL_CONSTRAINT__bindgen_ty_1,
        IsPresentValue
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PACKETMONITOR_PROTOCOL_CONSTRAINT"]
        [::std::mem::size_of::<PACKETMONITOR_PROTOCOL_CONSTRAINT>() - 216usize];
    ["Alignment of PACKETMONITOR_PROTOCOL_CONSTRAINT"]
        [::std::mem::align_of::<PACKETMONITOR_PROTOCOL_CONSTRAINT>() - 8usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Name"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Name) - 0usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Mac1"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Mac1) - 132usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Mac2"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Mac2) - 138usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::VlanId"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, VlanId) - 144usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::EtherType"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, EtherType) - 146usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::DSCP"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, DSCP) - 148usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::TransportProtocol"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, TransportProtocol) - 150usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Ip1"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Ip1) - 152usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Ip2"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Ip2) - 168usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::PrefixLength1"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, PrefixLength1) - 184usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::PrefixLength2"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, PrefixLength2) - 185usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Port1"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Port1) - 186usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Port2"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Port2) - 188usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::TCPFlags"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, TCPFlags) - 190usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::EncapType"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, EncapType) - 192usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::VxLanPort"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, VxLanPort) - 196usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Packets"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Packets) - 200usize];
    ["Offset of field: PACKETMONITOR_PROTOCOL_CONSTRAINT::Bytes"]
        [::std::mem::offset_of!(PACKETMONITOR_PROTOCOL_CONSTRAINT, Bytes) - 208usize];
};
pub type PacketMonitorAddCaptureConstraint_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: PACKETMONITOR_SESSION,
        captureConstraint: *const PACKETMONITOR_PROTOCOL_CONSTRAINT,
    ) -> HRESULT,
>;
pub type PacketMonitorAddSingleDataSourceToSession_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: PACKETMONITOR_SESSION,
        dataSource: *const PACKETMONITOR_DATA_SOURCE_SPECIFICATION,
    ) -> HRESULT,
>;
pub type PacketMonitorAttachOutputToSession_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: PACKETMONITOR_SESSION,
        outputHandle: *mut ::std::os::raw::c_void,
    ) -> HRESULT,
>;
pub type PacketMonitorCloseRealtimeStream_t =
    ::std::option::Option<unsafe extern "C" fn(realtimeStream: PACKETMONITOR_REALTIME_STREAM)>;
pub type PacketMonitorCloseSessionHandle_t =
    ::std::option::Option<unsafe extern "C" fn(session: PACKETMONITOR_SESSION)>;
pub type PacketMonitorCreateLiveSession_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: PACKETMONITOR_HANDLE,
        name: PCWSTR,
        session: *mut PACKETMONITOR_SESSION,
    ) -> HRESULT,
>;
pub type PacketMonitorCreateRealtimeStream_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: PACKETMONITOR_HANDLE,
        configuration: *const PACKETMONITOR_REALTIME_STREAM_CONFIGURATION,
        realtimeStream: *mut PACKETMONITOR_REALTIME_STREAM,
    ) -> HRESULT,
>;
pub type PacketMonitorEnumDataSources_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: PACKETMONITOR_HANDLE,
        sourceKind: PACKETMONITOR_DATA_SOURCE_KIND,
        showHidden: BOOLEAN,
        bufferCapacity: SIZE_T,
        bytesNeeded: *mut SIZE_T,
        dataSourceList: *mut PACKETMONITOR_DATA_SOURCE_LIST,
    ) -> HRESULT,
>;
pub type PacketMonitorInitialize_t = ::std::option::Option<
    unsafe extern "C" fn(
        apiVersion: UINT32,
        reserved: *mut ::std::os::raw::c_void,
        handle: *mut PACKETMONITOR_HANDLE,
    ) -> HRESULT,
>;
pub type PacketMonitorSetSessionActive_t = ::std::option::Option<
    unsafe extern "C" fn(session: PACKETMONITOR_SESSION, active: BOOLEAN) -> HRESULT,
>;
pub type PacketMonitorUninitialize_t =
    ::std::option::Option<unsafe extern "C" fn(handle: PACKETMONITOR_HANDLE)>;
